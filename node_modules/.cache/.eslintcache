[{"D:\\React\\text-utils-clone\\src\\index.js":"1","D:\\React\\text-utils-clone\\src\\reportWebVitals.js":"2","D:\\React\\text-utils-clone\\src\\App.js":"3","D:\\React\\text-utils-clone\\src\\components\\Alert.js":"4","D:\\React\\text-utils-clone\\src\\components\\Navbar.js":"5","D:\\React\\text-utils-clone\\src\\components\\TextForm.js":"6"},{"size":513,"mtime":1657848419000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1657848419000,"results":"9","hashOfConfig":"8"},{"size":2175,"mtime":1657854922138,"results":"10","hashOfConfig":"8"},{"size":452,"mtime":1657848419000,"results":"11","hashOfConfig":"8"},{"size":1604,"mtime":1657855076312,"results":"12","hashOfConfig":"8"},{"size":2861,"mtime":1657848419000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vckwkp",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\text-utils-clone\\src\\index.js",[],[],"D:\\React\\text-utils-clone\\src\\reportWebVitals.js",[],[],"D:\\React\\text-utils-clone\\src\\App.js",[],[],"D:\\React\\text-utils-clone\\src\\components\\Alert.js",[],[],"D:\\React\\text-utils-clone\\src\\components\\Navbar.js",["33"],[],"import React from 'react'\nimport PropTypes from 'prop-types'\n//import { Link } from 'react-router-dom'\n\nexport const Navbar = (props) => {\n  return (\n    <>\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item active\">\n            <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n          </li>\n          {/* <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n          </li> */}\n        </ul>\n      </div>\n      <div className={`form-check form-switch text-${props.mode==='light'? 'dark' : 'light'}`}>\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode}  role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n      </div>\n      </nav>\n    </>\n  )\n}\nNavbar.propTypes = {title: PropTypes.string.isRequired,\n                    aboutText: PropTypes.string}\n\n// Navbar.defaultProps = {\n//     title: 'Set title here',\n//     aboutText: 'Set About Text'\n// }","D:\\React\\text-utils-clone\\src\\components\\TextForm.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":9,"column":7,"nodeType":"36","endLine":9,"endColumn":44},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]